name: "Cover Agent CI pipeline"
description: "test"
author: "Kousik Mitra"
inputs:
  sourceDir:
    description: "Source code dir"
    required: true
  desiredCoverage:
    description: "Desired coverage"
    default: "70"
  maxIterations:
    description: "Max iterations to run to acheive desired coverage"
    default: "1"
  modelName:
    description: "Name of the model"
    required: true
  apiEndpoint:
    description: "API Endpoint to access the model"
    required: true
  githubToken:
    description: "github token"
    required: true
outputs:
  previousCoverage:
    description: "Previous coverage"
    value: ${{ steps.cover-agent-ci-action.outputs.previousCoverage }}
  currentCoverage:
    description: "Current coverage"
    value: ${{ steps.cover-agent-ci-action.outputs.currentCoverage }}
runs:
  using: composite
  steps:
    - uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    - name: Install cover-agent
      shell: sh
      run: |
        pip install git+https://github.com/Codium-ai/cover-agent.git

    - name: setup go
      uses: actions/setup-go@v2
      with:
        go-version: "^1.20.0"

    - name: Install go coverage tools
      shell: sh
      run: |
        go version
        go install github.com/axw/gocov/gocov@v1.1.0
        go install github.com/AlekSi/gocov-xml@v1.1.0

    - name: installing dep
      shell: sh
      run: go mod tidy

    - name: Extract Coverage Before Test Gen AI
      id: coverageBefore
      shell: sh
      run: |
        go test -v -coverprofile=coverageBefore.out ./...
        echo "coverage=$(go tool cover -func=coverageBefore.out | grep total | awk '{print $3}')" >> $GITHUB_OUTPUT

    - name: Run cover-agent-ci
      id: cover-agent-ci-action
      uses: kousikmitra/cover-agent-ci/cover-agent-action@main
      with:
        sourceDir: ${{ inputs.sourceDir }}
        desiredCoverage: ${{ inputs.desiredCoverage }}
        maxIterations: ${{ inputs.maxIterations }}
        modelName: ${{ inputs.modelName }}
        apiEndpoint: ${{ inputs.apiEndpoint }}
        githubToken: ${{ inputs.githubToken }}

    - name: Coverage after generated tests
      id: coverageAfter
      shell: sh
      run: |
        go test -v -coverprofile=coverageAfter.out ./...
        echo "coverage=$(go tool cover -func=coverageAfter.out | grep total | awk '{print $3}')" >> $GITHUB_OUTPUT

    - name: "Remove files"
      shell: sh
      run: |
        rm -f run.log test_results.html coverageBefore.* coverageAfter.*
        git diff

    - name: Create PR with changes
      id: create-pr
      uses: peter-evans/create-pull-request@v6
      with:
        branch: "testgen/${{ github.head_ref || github.ref_name }}"
        base: ${{ github.head_ref || github.ref_name }}
        commit-message: Add generated tests
        title: "Generated test for PR #${{ github.event.number }}"
        token: ${{ inputs.githubToken }}

    - name: Comment coverage summary on PR
      if: ${{ steps.create-pr.outputs.pull-request-number }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.githubToken }}
        script: |
          const fs = require('fs');
          const coverageBefore = "${{ steps.coverageBefore.outputs.coverage }}".trim();
          const coverageAfter = "${{ steps.coverageAfter.outputs.coverage }}".trim();
          const comment = `### Code Coverage Summary\n\nTotal Coverage Before Test Gen AI: ${coverageBefore}\n\n\nVoila!! Total Coverage After Test Gen AI: ${coverageAfter}\n\n\nFind the PR with generated test #${{steps.create-pr.outputs.pull-request-number}}`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
